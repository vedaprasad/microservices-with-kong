name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  ARGOCD_AUTH_PASSWORD: ${{ secrets.ARGOCD_AUTH_PASSWORD }}
  ARGOCD_AUTH_USERNAME: ${{ secrets.ARGOCD_AUTH_USERNAME }}

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout repo

    - name: Generate build number
      uses: einaregilsson/build-number@v3
      with:
          token: ${{ secrets.GIT_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image for bookings
      run: cd $GITHUB_WORKSPACE/microservices/bookings/ && docker build -t vedaprasad/bookings .

    - name: Push bookings Docker image
      run: docker push vedaprasad/bookings

    - name: Build Docker image for movies
      run: cd $GITHUB_WORKSPACE/microservices/movies/ && docker build -t vedaprasad/movies .

    - name: Push movies Docker image
      run: docker push vedaprasad/movies

    - name: Build Docker image for showtimes
      run: cd $GITHUB_WORKSPACE/microservices/showtimes/ && docker build -t vedaprasad/showtimes .

    - name: Push showtimes Docker image
      run: docker push vedaprasad/showtimes

    - name: Build Docker image for user
      run: cd $GITHUB_WORKSPACE/microservices/user/ && docker build -t vedaprasad/user .

    - name: Push user Docker image
      run: docker push vedaprasad/user

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.14.0'

    - name: set env var
      run : echo "HELM_EXPERIMENTAL_OCI=1" >> $GITHUB_ENV
      
    - name: Login to Helm registry
      run: helm registry login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} registry-1.docker.io

    - name: Package Helm chart for bookings
      run: helm package $GITHUB_WORKSPACE/microservices/bookings/helm/
      
    - name: Upload Helm chart for bookings
      run: helm push /home/runner/work/microservices-with-kong/microservices-with-kong/bookings-0.1.0.tgz oci://registry-1.docker.io/vedaprasad

    - name: Package Helm chart for showtimes
      run: helm package $GITHUB_WORKSPACE/microservices/showtimes/helm/

    - name: Upload Helm chart for showtimes
      run: helm push /home/runner/work/microservices-with-kong/microservices-with-kong/showtimes-0.1.0.tgz oci://registry-1.docker.io/vedaprasad
    
    - name: Package Helm chart for movies
      run: helm package $GITHUB_WORKSPACE/microservices/movies/helm/

    - name: Upload Helm chart for movies
      run: helm push /home/runner/work/microservices-with-kong/microservices-with-kong/movies-0.1.0.tgz oci://registry-1.docker.io/vedaprasad

    - name: Package Helm chart for user
      run: helm package $GITHUB_WORKSPACE/microservices/user/helm/

    - name: Upload Helm chart for user
      run: helm push /home/runner/work/microservices-with-kong/microservices-with-kong/user-0.1.0.tgz oci://registry-1.docker.io/vedaprasad

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
         terraform_version: 1.7.0

    - name: Terraform init bookings
      id: init
      run: cd $GITHUB_WORKSPACE/microservices/bookings/terraform && terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    - name: Terraform validate bookings
      id: validate
      run: cd $GITHUB_WORKSPACE/microservices/bookings/terraform && terraform validate

    - name: Terraform plan bookings
      id: plan
      run: cd $GITHUB_WORKSPACE/microservices/bookings/terraform && terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform apply bookings
      id: apply
      run: cd $GITHUB_WORKSPACE/microservices/bookings/terraform && terraform apply -auto-approve -input=false
      continue-on-error: true

    - name: Terraform init movies
      run: cd $GITHUB_WORKSPACE/microservices/movies/terraform && terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    - name: Terraform validate movies
      run: cd $GITHUB_WORKSPACE/microservices/movies/terraform && terraform validate

    - name: Terraform plan movies
      run: cd $GITHUB_WORKSPACE/microservices/movies/terraform && terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform apply movies
      run: cd $GITHUB_WORKSPACE/microservices/movies/terraform && terraform apply -auto-approve -input=false
      continue-on-error: true

    - name: Terraform init showtimes
      run: cd $GITHUB_WORKSPACE/microservices/showtimes/terraform && terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    - name: Terraform validate showtimes
      run: cd $GITHUB_WORKSPACE/microservices/showtimes/terraform && terraform validate

    - name: Terraform plan showtimes
      run: cd $GITHUB_WORKSPACE/microservices/showtimes/terraform && terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform apply showtimes
      run: cd $GITHUB_WORKSPACE/microservices/showtimes/terraform && terraform apply -auto-approve -input=false
      continue-on-error: true

    - name: Terraform init user
      run: cd $GITHUB_WORKSPACE/microservices/user/terraform && terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    - name: Terraform validate user
      run: cd $GITHUB_WORKSPACE/microservices/user/terraform && terraform validate

    - name: Terraform plan user
      run: cd $GITHUB_WORKSPACE/microservices/user/terraform && terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform apply user
      run: cd $GITHUB_WORKSPACE/microservices/user/terraform && terraform apply -auto-approve -input=false
      continue-on-error: true



      
    


    